<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <parameter name="ua" type="uainput" trigger="false" relative="false" value=""/>
  <code><![CDATA[/* 
Parse a display or displays and collect references to other displays
Input (members of ua):
	-node:uanodeid{mandatory} Specifies the nodeid of the display or the folder to parse
Output (return value)	:
	tablecolumnheaders:[string] Array of column titles
	tablecolumntypes:[uanodeid] Array of typeDefinitions of column types
	tabledata:[[string]] Array of string array that represents the rows of the result
If no other displays are referenced empty arrays are returned.
*/

function toNodes2(result, x) {
	for (var i = 0; i < result.length; ++i)
		x.push(result[i].node);
}

var node = Ua.findNode(ua.node);
var nodeExist = Ua.Status(node) != Ua.Status.BADNODEIDUNKNOWN;

var startNodes = [];
if (node.result.equal(node.result.typeDefinition.valueOf(), "VariableTypes.ATVISE.Display").result) {
	startNodes.push(node);
}

toNodes2(node.result.browse({
	typeDefinition: "VariableTypes.ATVISE.Display",
	recursive: true
}), startNodes);

var from = [];
var to = [];

for (var i = 0; i < startNodes.length; ++i) {
	var d = call("SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.CrossRef.Lib.DisplayReferences", {
		"ua": {
			node: startNodes[i],
			recursive: false
		}
	});

	for (var j = 0; j < d.to.length; ++j) {
		from.push(d.from[j]);
		to.push(d.to[j]);
	}
}

var strings1 = [];
var strings2 = [];

for (var i = 0; i < to.length; ++i) {
	strings1.push(from[i].nodeId.address);
	strings2.push(to[i].nodeId.address);
}

var variableTypesNode = Ua.findNode("VariableTypes.ATVISE.Display");

return {
	tablecolumnheaders: ["Display", "Contains display"],
	tablecolumntypes: [variableTypesNode, variableTypesNode],
	tabledata: [strings1, strings2]
};]]></code>
</script>
