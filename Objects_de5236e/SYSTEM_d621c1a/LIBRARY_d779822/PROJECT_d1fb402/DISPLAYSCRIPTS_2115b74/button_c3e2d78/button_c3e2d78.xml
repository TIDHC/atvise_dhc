<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
    <help/>
  </metadata>
  <code><![CDATA[/**
 * Code for the button object display
 * ----------------------------------
 * This control is a simple button which just fires the trigger "clicked".
 * This trigger can be used to add a Simple Dynamic to this button which reacts on the trigger "clicked" and fires a new trigger.
 * This new trigger can then be used by other elements.
 */

/**
 * IMPORTS
 */
var ConsistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");


/**
 * DECLARATION SECTION
 */
var display = webMI.query["display"];
var consistencyGroup = webMI.query["consistencyGroup"];
var consistencyFunction = webMI.query["consistencyFunction"];

/** style & colors **/
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var symbolScaling = parseInt(webMI.query["symbolScaling"], 10);
var symbolId = document.getElementById("button_symbol").id;


/** others **/
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = (webMI.query["tabIndex"] == undefined) ? "" : webMI.query["tabIndex"];
var tooltip = (webMI.query["tooltip"] == undefined) ? "" : webMI.query["tooltip"];


/** status **/
var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var lockInputEvents = true;


/** check label & symbol **/
var checkLabel = webMI.query["label"] ? webMI.query["label"] : "";
var checkLabel2 = webMI.query["label2"] ? webMI.query["label2"] : "";
var visibilityLabel = (checkLabel != "" || checkLabel2 != "") && webMI.query["visibilityLabel"] !== "hidden";
var visibilitySymbol = webMI.query["symbol"] != "" && webMI.query["visibilitySymbol"] != "hidden";

if (typeof webMI.gfx.getX("button_label_2") != "undefined") {
	var label = webMI.query["label"];
	var label2 = webMI.query["label2"];
	var fontSize = webMI.query["fontSize"];
	var fontSize2 = webMI.query["fontSize2"];
	var fontWeight = webMI.query["fontWeight"];
	var fontWeight2 = webMI.query["fontWeight2"];
}

/** data **/
var runTimeNodeConfig = {
	// no nodes to parse
};

/** advanced menu layout with corrections **/
var menuLayout = {
	customElementPosition: webMI.query["elementPosition"],
	customFadeInAtHover: webMI.query["fadeInAtHover"],
	customElementOffsetX: webMI.query["elementOffsetX"],
	customElementOffsetY: webMI.query["elementOffsetY"],
	customClickareaEnlargement: webMI.query["clickareaEnlargement"],
	customElementLayoutOffsets: {}
}


/**
 * RUNTIME SECTION
 */
if (typeof activationTriggerHandling === "function") activationTriggerHandling("com.atvise.setActive");

if (true) {
	var notifierConfig = {
		id: document.getElementById("button_clickarea").id,
		rights: [
			{nodeId: webMI.query["activeNode"], rights: "read", disable: true, notify: true}
		],
		menuLayout: menuLayout
	};

	if (visibilitySymbol) {
		notifierConfig.rights.push({nodeId: webMI.query["symbol"], rights: "read", disable: true, notify: true});
	}

	var rightsHandlingProperties = {
		activationNodeSet: {activeNode: webMI.query["activeNode"], activeValue: webMI.query["activeValue"]},
		notifierConfiguration: webMI.query.displayAcNotification === "true" ? notifierConfig : {},
		userRight: webMI.query["right"],
		editable: true
	};

	if (typeof rightsHandling === "function")
		rightsHandling(rightsHandlingProperties);

	/** no nodes to handle, init can be done directly **/
	initialize(runTimeNodeConfig);

}


/**
 * read or subscribe data by runtime node configuration
 * @param nodeCfg
 */
function initialize(nodeCfg) {
	if (typeof webMI.gfx.getX("button_label_2") != "undefined") {
		/* calculation of visibility and positions due scaling && bindings */
		webMI.addOnload(function () {
			var FRAME = {};
			FRAME.element = document.getElementById("outer_frame");
			FRAME.height = parseInt(FRAME.element.getAttribute("height"));
			FRAME.width = parseInt(FRAME.element.getAttribute("width"));

			var BUTTON = {};
			BUTTON.element = document.getElementById("button_clickarea").parentNode;
			BUTTON.height = parseInt(BUTTON.element.getAttribute("height"));
			BUTTON.width = parseInt(BUTTON.element.getAttribute("width"));


			/* set text position  */
			var onlyLabel1 = (typeof label2 === "undefined" || label2 === "") && typeof label !== "undefined" && label !== "";
			var onlyLabel2 = (typeof label === "undefined" || label === "") && typeof label2 !== "undefined" && label2 !== "";
			var bothLabels = typeof label !== "undefined" && label !== "" && typeof label2 !== "undefined" && label2 !== "";

			var LABEL_1 = document.getElementById("button_label_1");
			var LABEL_2 = document.getElementById("button_label_2");

			var font1 = parseInt(fontSize);
			var font2 = parseInt(fontSize2);
			var space = Math.ceil((FRAME.height - font1 - font2) / 3);

			LABEL_1.setAttribute("y", space + font1 - 1);
			if (fontWeight == "bold") LABEL_1.setAttribute("font-weight", "bold");
			LABEL_2.setAttribute("y", FRAME.height - space - 1);
			if (fontWeight2 == "bold") LABEL_2.setAttribute("font-weight", "bold");


			/* set symbols to invisible */
			webMI.gfx.setVisible("button_label", false);
			webMI.gfx.setVisible("button_label_1", false);
			webMI.gfx.setVisible("button_label_2", false);
			webMI.gfx.setVisible("button_symbol", false);
			webMI.gfx.setVisible("button_symbol_top", false);
			webMI.gfx.setVisible("button_symbol_bottom", false);


			/* handle visibility */
			if (BUTTON.element.getAttribute("visibility") != "hidden") {
				if (visibilityLabel && visibilitySymbol) {
					if (onlyLabel1) {
						webMI.gfx.setVisible("button_label_1", null);
						webMI.gfx.setVisible("button_symbol_bottom", null);
					} else if (onlyLabel2) {
						webMI.gfx.setVisible("button_label_2", null);
						webMI.gfx.setVisible("button_symbol_top", null);
					} else if (bothLabels) {
						webMI.gfx.setVisible("button_label_1", null);
						webMI.gfx.setVisible("button_label_2", null);
					}
				} else if (visibilitySymbol) {
					webMI.gfx.setVisible("button_symbol", null);
				} else if (visibilityLabel) {
					if (onlyLabel1) {
						webMI.gfx.setVisible("button_label", null);
					}
					if (onlyLabel2) {
						webMI.gfx.setVisible("button_label_2", null);
					}
					if (bothLabels) {
						webMI.gfx.setVisible("button_label_1", null);
						webMI.gfx.setVisible("button_label_2", null);
					}
				}

				/* set and scale icon position */
				if (symbolScaling != 0 && symbolScaling != 100) {
					var scale = {};
					scale.x = FRAME.width / BUTTON.width;
					scale.y = FRAME.height / BUTTON.height;
					scale.value = symbolScaling / 100;

					var offset = {};
					offset.x = 20 * (scale.x - scale.value) / 2;
					offset.y = 20 * (scale.y - scale.value) / 2;

					/* main icon */
					var icon = document.getElementById("button_symbol");
					icon.setAttribute("viewBox", "0,0,20,20");
					icon.setAttribute("x", 30 * scale.x + offset.x);
					icon.setAttribute("y", 5 * scale.y + offset.y);
					icon.setAttribute("width", 20 * scale.value);
					icon.setAttribute("height", 20 * scale.value);

					/* get container fix */
					var path = icon.parentNode;
					var matrix = path.transform.baseVal.consolidate().matrix;

					/* top icon (with g-container-fix) */
					var icon_top = document.getElementById("button_symbol_top");
					var path_top = icon_top.parentNode;
					path_top.transform.baseVal.getItem(0).setMatrix(matrix);

					var scaleMatrix = path_top.transform.baseVal.consolidate().matrix;
					icon_top.setAttribute("x", BUTTON.width / 2 * scale.x - 10);
					icon_top.setAttribute("y", 4 * scale.y);

					/* bottom icon (with g-container-fix) */
					var icon_bot = document.getElementById("button_symbol_bottom");
					var path_bot = icon_bot.parentNode;
					path_bot.transform.baseVal.getItem(0).setMatrix(matrix);

					var scaleMatrix = path_bot.transform.baseVal.consolidate().matrix;
					icon_bot.setAttribute("x", BUTTON.width / 2 * scale.x - 10);
					icon_bot.setAttribute("y", (BUTTON.height - 14) * scale.y);
				}
			}
		});
	}

	if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
	}


	if (tooltip != "") {
		webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
			"auto": "true",
			"id": "button_clickarea",
			"text": tooltip
		});
	}

	webMI.addOnload(function () {
		var doc = document.getElementById("button_clickarea").ownerDocument;
		tabHandler.register(tabIndex, _inputKeyHandler, doc);
	});
}

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
	lockInputEvents = false;
}

function setInactiveLayout() {
	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
	lockInputEvents = true;
}


function release() {
	if (lockInputEvents)
		return;

	webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}


/**
 * key handler for keyboard inputs
 * @param keyTH
 * @param param2
 * @returns {*}
 * @private
 */
function _inputKeyHandler(keyTH, param2) {
	if (keyTH == "apply") {
		_inputKeyHandler_ApplyTH();

	} else if (keyTH == "arrow") {
		_inputKeyHandler_ArrowTH(param2)

	} else if (keyTH == "back") {
		_inputKeyHandler_BackTH()

	} else if (keyTH == "blur") {
		_inputKeyHandler_BlurTH()

	} else if (keyTH == "focus") {
		_inputKeyHandler_FocusTH();

	} else if (keyTH == "releaseClick") {
		_inputKeyHandler_ReleaseClickTH();

	} else if (keyTH == "space") {
		_inputKeyHandler_SpaceTH();

	} else if (keyTH == "isActive") {
		return param2(document.getElementById("button_clickarea").parentNode);

	}

	/**
	 * handle apply
	 * @private
	 */
	function _inputKeyHandler_ApplyTH() {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");

		if (lockInputEvents)
			return;

		webMI.trigger.fire("clicked", true, "");

		if (consistencyGroup)
			consistencyFunction == "write" ? ConsistencyHandler.write(consistencyGroup) : ConsistencyHandler.read(consistencyGroup);
	}

	/**
	 * handle arrows
	 * @param dir
	 * @private
	 */
	function _inputKeyHandler_ArrowTH(dir) {
		return;
	}

	/**
	 * handle backspace
	 * @private
	 */
	function _inputKeyHandler_BackTH() {
		return;
	}

	/**
	 * handle blur
	 * @private
	 */
	function _inputKeyHandler_BlurTH() {
		release();
	}

	/**
	 * handle focus
	 * @private
	 */
	function _inputKeyHandler_FocusTH() {
		if (lockInputEvents)
			return;

		webMI.gfx.setStroke("button_stroke", focusStrokeColor);
		if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
			webMI.gfx.setStrokeWidth("button_stroke", 2);
		}
	}

	/**
	 * handle release
	 * @private
	 */
	function _inputKeyHandler_ReleaseClickTH() {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	}

	/**
	 * handle space
	 * @private
	 */
	function _inputKeyHandler_SpaceTH() {
		return;
	}
}


/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", "mousedown", function (e) {
	if (lockInputEvents)
		return;


	var id = "button_clickarea";
	var value = true;

	return function (value) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
	}(value);
});

webMI.addEvent("button_clickarea", "mouseup", function (e) {
	if (lockInputEvents)
		return;

	var id = "button_clickarea";
	var value = true;

	return function (value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "mouseout", function (e) {
	if (lockInputEvents)
		return;

	var id = "button_clickarea";
	var value = true;

	return function (value) {
		release();
	}(value);
});

webMI.addEvent("button_clickarea", "click", function (e) {
	if (lockInputEvents)
		return;

	tabHandler.setCurrentIndex(_inputKeyHandler, function () {
		webMI.trigger.fire("clicked", true, "")
	});

	if (consistencyGroup)
		consistencyFunction == "write" ? ConsistencyHandler.write(consistencyGroup) : ConsistencyHandler.read(consistencyGroup);
});

webMI.addEvent("button_clickarea", "dragstart", function (e) {
	if (lockInputEvents)
		return;

	if (e.preventDefault) {
		e.preventDefault();
	}
});


/**
 * TRIGGER SECTION
 */

webMI.trigger.connect("com.atvise.setButtonSymbolColor", function (e) {
	if (symbolId.replace(e.value.buttonId, "") != symbolId) {
		setChildrenColors(document.getElementById("button_symbol").childNodes);
		setChildrenColors(document.getElementById("button_symbol_top").childNodes);
		setChildrenColors(document.getElementById("button_symbol_bottom").childNodes);

		// Search children recursively
		function setChildrenColors(children) {
			if (children && children.length > 0)
				for (var i = 0; i < children.length; i++) {
					if (children[i].attributes) {
						for (var j = 0; j < children[i].attributes.length; j++) {
							if (children[i].attributes[j].name == "fill" && children[i].attributes[j].value.toUpperCase() == e.value.currentColor.toUpperCase()) {
								children[i].attributes[j].value = e.value.newColor;
							}
							if (children[i].attributes[j].name == "stroke" && children[i].attributes[j].value.toUpperCase() == e.value.currentColor.toUpperCase()) {
								children[i].attributes[j].value = e.value.newColor;
							}
						}
						setChildrenColors(children[i].childNodes);
					}
				}
		}

	}
});

]]></code>
</script>
