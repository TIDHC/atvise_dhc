<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
    <owner>root</owner>
    <runcontext>caller</runcontext>
  </metadata>
  <parameter name="request" type="http.request" trigger="false" relative="false" value=""/>
  <code><![CDATA[const username = request.postvalues.username;
const oldpassword = request.postvalues.oldpassword;
const newpassword = request.postvalues.newpassword;
const validateNode = Ua.findNode("AGENT.OPCUA.METHODS.validateUserPassword");
const validateNodeExist = Ua.Status(validateNode) != Ua.Status.BADNODEIDUNKNOWN;
const validateBits = {
	"none": 0x0000,
	"active": 0x0001,
	"minLength": 0x0002,
	"requireLowerCase": 0x0004,
	"requireUpperCase": 0x0008,
	"requireDigit": 0x0010,
	"requireSpecialChar": 0x0020,
	"requireNewPw": 0x0040,
	"requireNameExclusion": 0x0080,
	"requireFullnameExclusion": 0x0100,
	"invalidUser": 0x0200,
	"invalidOldPassword": 0x0400,
	"hasSurroundingWhiteSpace": 0x0800,
	"inDelay": 0x1000,
	"userLocked": 0x2000
};

if (validateNodeExist) {
	const response = validateNode.result.call({
		object: "AGENT.OPCUA.METHODS",
		input: [{"type": Ua.DataType.STRING, "value": username}, {"type": Ua.DataType.STRING, "value": newpassword ? newpassword : ""}]
	});

	if (response.error || (response.result.error && response.result.error > 0)) {
		return {
			"error": response.error ? response.error : response.result.error,
			"errorstring": "Password could not be validated @ validateUserPassword method: " + (response.errorstring ? response.errorstring : (response.result.errorstring ? response.result.errorstring : "unknown"))
		}
	} else {
		var ret = {};
		//return fullfilled requirements for a specified new password or password policy only if password is undefined
		var result = typeof newpassword != "undefined" ? parseInt(response.result[0]) : parseInt(response.result[1]);
		
		for (var i in validateBits)
			ret[i] = !!(result & validateBits[i]) ? true : false;

		//if only password policy is returned set the minLength boolean to the specific value (2) 
		if (typeof newpassword == "undefined")
			ret.minLength = response.result[2];

        return ret;
	}
} else {
	return {
		"error": -1,
		"errorstring": "Method validateUserPassword not found."
	};
}]]></code>
</script>
