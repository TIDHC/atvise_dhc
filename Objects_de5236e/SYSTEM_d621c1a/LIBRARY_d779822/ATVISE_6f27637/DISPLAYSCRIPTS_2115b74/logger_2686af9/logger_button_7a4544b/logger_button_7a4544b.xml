<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the logger button object display
 * -----------------------------------------------
 * This button watches log informations an opens the logger dialog.
 * Note: Access Control is managed by common/logger_watch script!
 */

/**
 * DECLARATION SECTION
 */
var active = false;
var activeNode = webMI.query["activeNode"] == undefined ? "" : webMI.query["activeNode"];
var activeValue = webMI.query["activeValue"] == undefined ? "" : webMI.query["activeValue"];
var activeSet = activeNode != "" && String(activeValue) != "";
var define = {
	hour: 1 * 60 * 60 * 1000,
	day: 24 * 60 * 60 * 1000,
	week: 7 * 60 * 60 * 1000
};
var extraBorderColor = webMI.query["extraBorderColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var right = webMI.query["right"] == undefined ? "" : webMI.query["right"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = webMI.query["tabIndex"] == undefined ? "" : webMI.query["tabIndex"];
var targetFrame = webMI.query["frame"];
var tooltip = webMI.query["tooltip"] == undefined ? "" : webMI.query["tooltip"];

var errorSmall = webMI.query["errorSmall"] == "true";
var errorView = webMI.query["errorView"] == "true";

var display = webMI.query["display"]
	? webMI.query["display"]
	: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.logger.logger_dialog";
var displaySmall = webMI.query["displaySmall"]
	? webMI.query["displaySmall"]
	: "SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.logger.logger_dialog_small";
display = webMI.getClientInfo()
	? webMI.getClientInfo().isDesktop
		? display
		: displaySmall
			? displaySmall
			: display
	: display;
display = errorSmall ? displaySmall : display;

var displayTitle = webMI.query["displayTitle"];
var displaySubTitle = webMI.query["displaySubTitle"];
var displayIcon = webMI.query["displayIcon"];

var lockInputEvents = true;

var menuLayout = {
	customElementPosition: webMI.query["elementPosition"],
	customFadeInAtHover: webMI.query["fadeInAtHover"],
	customElementOffsetX: webMI.query["elementOffsetX"],
	customElementOffsetY: webMI.query["elementOffsetY"],
	customClickareaEnlargement: webMI.query["clickareaEnlargement"],
	customElementLayoutOffsets: {}
};

/**
 * RUNTIME SECTION
 */
if (typeof activationTriggerHandling === "function") activationTriggerHandling("com.atvise.setActive");

var notifierConfig = {
	id: document.getElementById("button_clickarea").id,
	rights: [
		{nodeId: "AGENT.OBJECTS.ATVISE.Logger", rights: "read", disable: true, notify: false},
		{nodeId: "AGENT.OBJECTS.ATVISE.Status", rights: "read", disable: true, notify: false},
		{nodeId: "SYSTEM.LIBRARY.ATVISE.WEBMIMETHODS.LoggerBrowseLog", rights: "execute", disable: true, notify: false},
		{nodeId: display, rights: "read", disable: true, notify: true},
		{nodeId: displayIcon, rights: "read", disable: true, notify: true}
	],
	menuLayout: menuLayout
};

var rightsHandlingProperties = {
	activationNodeSet: {activeNode: webMI.query["activeNode"], activeValue: webMI.query["activeValue"]},
	notifierConfiguration: webMI.query.displayAcNotification === "true" ? notifierConfig : {},
	userRight: right
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

webMI.addOnload(function () {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		auto: "true",
		id: "button_clickarea",
		text: tooltip
	});
}

/**
 * FUNCTION SECTION
 */

/**
 * active/deactivate svg notification frame (blinking frame)
 * @param active
 */
function loggerFrameActive(active) {
	if (active !== false) {
		errorActive = true;
	} else {
		errorActive = false;
	}
	errorFrameActivation();
}

/**
 * animate svg notification frame (blinking frame)
 */
function errorFrameActivation() {
	if (errorActive) {
		webMI.gfx.setVisible("blinking_frame", true);
		webMI.gfx.setStroke("blinking_frame", errorIndication);

		var interval = errorInterval;
		if (errorInterval > 0) {
			setTimeout(function () {
				webMI.gfx.setVisible("blinking_frame", false);
				setTimeout(function () {
					errorFrameActivation();
				}, interval);
			}, interval);
		}
	} else {
		webMI.gfx.setVisible("blinking_frame", false);
	}
}

function setActiveLayout() {
	lockInputEvents = false;

	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
}

function setInactiveLayout() {
	lockInputEvents = true;

	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}

function release(stayFocued) {
	webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
		if (stayFocued == false) webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH() {
	if (lockInputEvents) return;

	webMI.gfx.setStroke("button_stroke", focusStrokeColor);
	if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
		webMI.gfx.setStrokeWidth("button_stroke", 2);
	}
}

function applyTH() {
	if (lockInputEvents) return;

	if (display != "") {
		openDataDialog();
	}
}

/**
 * open error log display
 */
function openDataDialog() {
	if (lockInputEvents) return;

	var query = [];
	query["errorSmall"] = display == displaySmall;
	query["errorGroup"] = errorGroup;
	query["errorSubgroup"] = errorSubgroup;
	query["errorLabel"] = errorLabel;
	query["errorStrictly"] = errorStrictly;
	query["errorView"] = errorView;

	query["displayTitle"] = displayTitle;
	query["displaySubTitle"] = displaySubTitle;
	query["displayIcon"] = displayIcon;

	var w = display == displaySmall ? 800 : 1280;
	var h = display == displaySmall ? 425 + 20 : 680 + 20;

	var openedWindow = webMI.display.openWindow({
		display: display,
		extern: false,
		menubar: false,
		modal: true,
		movable: true,
		resizable: false,
		scrollbars: false,
		status: false,
		title: "T{Log}",
		toolbar: false,
		width: w,
		height: h,
		query: query
	});

	var doc = openedWindow.getContentDocument();
	webMI.addEvent(doc, "keydown", function (e) {
		if (e.keyCode == 27) openedWindow.close();
	});

	loggerFrameActive(false);
}

function backTH() {
}

function arrowTH(dir) {
}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release(false);
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return param2(document.getElementById("button_clickarea").parentNode);
	}
}

/**
 * Event SECTION
 */
webMI.addEvent("button_clickarea", "click", function (e) {
	if (lockInputEvents) return;

	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		if (display != "") {
			tabHandler.setCurrentIndex(keyHandler);
			openDataDialog();
		}
	})(value);
});

webMI.addEvent("button_clickarea", "mousedown", function (e) {
	if (lockInputEvents) return;

	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
	})(value);
});

webMI.addEvent("button_clickarea", "mouseup", function (e) {
	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		release(true);
	})(value);
});

webMI.addEvent("button_clickarea", "mouseout", function (e) {
	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		release(false);
	})(value);
});

webMI.addEvent("button_clickarea", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
]]></code>
</script>
