<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
    <help/>
  </metadata>
  <code><![CDATA[var chart;
var nodeAddress = webMI.query["node"];
var span = webMI.query["span"];
var unit = webMI.query["unit"];
var unittime;

const highchartsContainer = document.getElementById('highcharts_container');

if(nodeAddress != undefined){
	webMI.trigger.fire("setValue", nodeAddress, "node");
}

switch(unit) {
	case "s":
		unittime = 1000;
		break;
	case "m":
		unittime = 60*1000;
		break;
	case "h":
		unittime = 60*60*1000;
		break;
	case "d":
		unittime = 24*60*60*1000;
		break;
}
var timeStart = new Date().getTime()-(span*unittime);
webMI.trigger.fire("com.atvise.datepicker_pickerStart",timeStart);
var timeEnd = new Date().getTime();
var alarmTimeEnd = timeEnd+500;
webMI.trigger.fire("com.atvise.datepicker_pickerEnd",timeEnd);
var lang = webMI.rootWindow.language;
var rootWindow = webMI.rootWindow;

webMI.addOnload(function(e) {
	var id = "highcharts_container";
	var value = true;
	return function(value) {	
		if (rootWindow.Highcharts == undefined){
			webMI.data.loadScript("/highcharts/highcharts.js",function(url, alreadyLoaded){
				webMI.data.loadScript("/highcharts/modules/exporting.js",function(url, alreadyLoaded){
					webMI.data.loadScript("/highcharts/themes/grid-light.js",function(){
						initChart();
						setchart();
					});
				});	
			});	
		} else {			
			initChart();
			setchart();
		}
	} (value);
});

function initChart(){
	var conf = {};
	conf.chart = {
		zoomType: 'x',
		type: 'spline',
		style: {
				fontSize: 15
			}
	};
	conf.xAxis = {
		type: 'datetime',
		visible: true,
		crosshair: true
	};
	conf.yAxis = {
		gridLineWidth: 1,
		title: null,
		labels: {
			enabled: true,
		},
	};
	conf.legend = {
		enabled: false,
	};
	conf.title = {
		text: 'Timeline of alarms'
	};
	conf.subtitle = {
		text: 'All alarms in the entered time range'
	};
	conf.tooltip = {
		style: {
			padding: 10,
			fontSize: 15
		},
		formatter: function () {
			if(isNaN(this.key)) {
				return ''+rootWindow.Highcharts.dateFormat('%A, %b %e, %H:%M:%S:%L', this.x) +'<br>' + this.key+'';
			}else{
				return ''+rootWindow.Highcharts.dateFormat('%A, %b %e, %H:%M:%S:%L', this.x) +'<br>T{Value}: ' + this.y+'';
			}
		},
	};
	conf.exporting = {
		buttons: {
			contextButton: {
				menuItems: ["printChart", "separator", "downloadPNG", "downloadJPEG", "downloadSVG"]
			}
		}
	};
	conf.plotOptions = {
		spline: {
			marker: {
				radius: 4,
				lineColor: '#575757',
				lineWidth: 1
			}
		}
	};
	conf.series = [{
		color: '#54d900',
		marker: {
			symbol: 'square'
		},
		name: 'Value',
		data: [] //data
	}];
	
	var options = {
		trendName: webMI.query.trendName,
		trendGroup: webMI.query.trendGroup,
		trendConfig: conf
	};

	webMI.trendFactory.createTrend(highchartsContainer, options, function (trendInstance) {
		chart = trendInstance;
		setchart();
	});	
}

function setchart(){
	let data = [];
	var filter = {};
	var filterAlarm = {};
	filter.type = ["v:1"];
	filter.address = ["g:"+nodeAddress];
	filter.timestamp = ["n:>=" + timeStart + "<" + timeEnd];
	filterAlarm.type = ["v:2"];
	filterAlarm.address = ["g:"+nodeAddress+".*"];
	filterAlarm.timestamp = ["n:>=" + timeStart + "<" + alarmTimeEnd];
	webMI.data.queryFilter(filter, function(val) {
		var results = val.result;
		for(result in results){
			var value = results[result].value;
			if(typeof results[result].value === "boolean"){
				value = value === true ? 1 : 0;
			}
			data.push({x:results[result].timestamp, y:value});
		}
		webMI.data.queryFilter(filterAlarm, function(e) {
			var alarms = e.result;
			let index = 0;
			let inactiveIndex;
			let state;
			for(alarm in alarms){
				state = alarms[alarm].state;
				var value = "<br>T{Value}: <strong>"+alarms[alarm].value+"</strong>"
				if(alarms[alarm].state == 1){
					index = data.findIndex(value => { return value.x === alarms[alarm].valuetimestamp });
					inactiveIndex = "";
					if(index != -1){
						data[index] = {x:data[index].x, y:data[index].y, marker:{enabled: true,symbol:'url(/Alarm_Active.png)'},name:"<span style='font-size:15px'>T{Name}: <strong>"+alarms[alarm].SourceName+"</strong><br>T{Alarm condition}: <strong>"+alarms[alarm].ConditionName+"</strong><br>T{Status}: <strong>"+alarms[alarm].ActiveState[lang]+" "+alarms[alarm].AckedState[lang]+"</strong><br>T{Event text}: <strong>"+alarms[alarm].eventtext[lang]+"</strong>"+value+"</span>"};
					}
				}
				else{
					inactiveIndex = data.findIndex(value => { return value.x === alarms[alarm].valuetimestamp });
					if(inactiveIndex != -1){
						data[inactiveIndex] = {x:data[inactiveIndex].x, y:data[inactiveIndex].y, marker:{enabled: true,symbol:'url(/Alarm_Inactive.png)'},name:"<span style='font-size:15px'>T{Name}: <strong>"+alarms[alarm].SourceName+"</strong><br>T{Alarm condition}: <strong>"+alarms[alarm].ConditionName+"</strong><br>T{Status}: <strong>"+alarms[alarm].ActiveState[lang]+" "+alarms[alarm].AckedState[lang]+"</strong><br>T{Event text}: <strong>"+alarms[alarm].eventtext[lang]+"</strong>"+value+"</span>"};
					}
				}
			}
			
			rootWindow.Highcharts.setOptions({
				global: {
					useUTC: false
				},
				credits: {
					 enabled: false
				}
			});

			chart.chart.series[0].setData(data);
			chart.chart.xAxis[0].setExtremes(timeStart, timeEnd);
		});
	});
}


webMI.trigger.connect("valuechanged", function(e) { 
    timeStart = e.value;
}, "pickerStart");

webMI.trigger.connect("valuechanged", function(e) { 
    timeEnd = e.value;
    alarmTimeEnd = timeEnd+500;
}, "pickerEnd");
webMI.trigger.connect("valuechanged", function(e) { 
    nodeAddress = e.value;
}, "node");
webMI.addEvent("id_btn_create", "mouseover", function(e) {
	var id = "id_btn_create";
	var value = true;
	return function(value) {
		document.getElementById(id).style.cursor = "pointer";
	} (value);
});
webMI.addEvent("id_btn_create", ["click","touchstart"], function(e) {
	var id = "id_btn_create";
	var value = true;
	return function(value) {
		if(timeStart && timeEnd){
			if(nodeAddress){			
				setchart();
			}else{
				alert('T{Please define node Address.}');				
			}
		}else{
			alert('T{Please enter data in all fields.}');	
		}
	} (value);
});

]]></code>
</script>
