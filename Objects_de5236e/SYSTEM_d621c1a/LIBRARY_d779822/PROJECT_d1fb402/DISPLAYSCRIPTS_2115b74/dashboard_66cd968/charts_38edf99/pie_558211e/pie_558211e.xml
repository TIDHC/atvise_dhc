<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the chart pie and dougnut resource object display
 * ----------------------------------------
 * This script serves as an interface that connects the with highcharts for pi charts
 */


/**
 * DECLARATION SECTION
 */
var BORDER_ID = "border";
var FO_ID = "fo_container";
var HIGHCHARTS_CONTAINER_ID = "dashboard_highcharts_container";
var MAIN_LABEL_ID = "main_label";
var SUB_LABEL_ID = "sub_label";
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var displayAcNotification = webMI.query["displayAcNotification"];
var active = false;


/**
 * Limitation
 */
var MAX_SERIES_COUNT = 25;


/**
 * Trigger setup
 */
var OPEN_DISPLAY_TRIGGER = "com.atvise.dashboard.openDisplay";
var SET_ACTIVE_TRIGGER = "com.atvise.dashboard.setActive";
var SET_BLINKING_FRAME_STROKE_TRIGGER = "com.atvise.dashboard.setBlinkingFrameStroke";
var SET_INACTIVE_TRIGGER = "com.atvise.dashboard.setInactive";
var SHOW_HIDE_BLINKING_FRAME_TRIGGER = "com.atvise.dashboard.showHideBlinkingFrame";


/**
 * BASE SETUP
 */
var BLINKING_FRAME_COLOR_INACTIVE = "#000000";

// Query parameters
var queryParams = webMI.query;
var activeNode = queryParams["activeNode"] || "";
var activeValue = queryParams["activeValue"] || "";
var colorInactive = queryParams["colorInactive"];


/** data **/
var runTimeNodeConfig = {};
for (var s = 1; s < 11; s++) {
	var seriesAddress = "series" + s + "Address";
	if (webMI.query[seriesAddress]) {
		runTimeNodeConfig[seriesAddress] =
			{
				value: null,
				address: webMI.query[seriesAddress],
				paramValue: "",
				read: true,
				write: false,
				aggregate: false
			}
	} else {
		break;
	}
}


/**
 * RUNTIME SECTION
 * Runtime code has to be executed after onload to take care all other resources are ready
 */
if (typeof activationTriggerHandling === "function") activationTriggerHandling("com.atvise.setActive");

if (displayAcNotification === "true") {
	var notifierConfig = {
		rights: [
			{nodeId: webMI.query["alarm"], rights: "alarmRead", disable: false, notify: true},
			{nodeId: webMI.query["activeNode"], rights: "read", disable: true, notify: true}
		],
	};

	for (var s = 1; s < 11; s++) {
		var seriesAddress = "series" + s + "Address";
		if (webMI.query[seriesAddress]) {
			notifierConfig.rights.push(
				{
					nodeId: webMI.query[seriesAddress],
					rights: "read", disable: false, notify: false
				}
			);
		} else {
			break;
		}
	}
}

var rightsHandlingProperties = {
	activationNodeSet: {activeNode: webMI.query["activeNode"], activeValue: webMI.query["activeValue"]},
	notifierConfiguration: webMI.query.displayAcNotification === "true" ? notifierConfig : {},
	userRight: webMI.query["right"],
	editable: true
};


if (typeof rightsHandling === "function")
	rightsHandling(rightsHandlingProperties);

if (typeof updateRunTimeNodeConfig === "function") {
	updateRunTimeNodeConfig(runTimeNodeConfig, notifierConfig.rights, initialize);
} else {
	initialize(runTimeNodeConfig)
}

function initialize(nodeCfg) {
	webMI.addOnload(function () {
		var chartDiv = document.getElementById(HIGHCHARTS_CONTAINER_ID);

		var addresses = [];
		var seriesNames = [];
		var seriesColors = [];
		var options = {};

		var addressIdx = 1;
		var seriesName = "";
		var seriesAddress = "";
		var seriesColor = "";

		webMI.trigger.connect(SET_ACTIVE_TRIGGER, function (triggerObj) {
			webMI.gfx.setVisible(FO_ID, null);
		}, FO_ID);

		webMI.trigger.connect(SET_INACTIVE_TRIGGER, function (triggerObj) {
			webMI.gfx.setVisible(FO_ID, false);
		}, FO_ID);

		// Query parameters
		var unit = queryParams["unit"] || "";
		var min = queryParams["min"] || null;
		var max = queryParams["max"] || null;
		var postDecimalFactor = Math.pow(10, queryParams["postDecimals"]);
		var seriesCount = queryParams["seriesCount"];
		var right = queryParams["right"] || "";
		var displayMode = queryParams["displayMode"];
		var alarmIndication = queryParams["alarmIndication"];
		var statusIndication = queryParams["statusIndication"];
		var statusEnabled = queryParams["statusEnabled"];
		var statusTrigger = queryParams["statusTrigger"];
		var alarmAddress = queryParams["alarm"];
		var textColor = queryParams["textColor"];
		var sortOrder = queryParams["sortOrder"];
		var outerSize = queryParams["outerSize"];
		var innerSize = queryParams["innerSize"];

		var active = false;
		var hasRight = false;
		var nodeIsActive = false;

		var statusLabels = {};
		statusLabels.Good = "";
		statusLabels.Bad = "BAD";
		statusLabels.Uncertain = "UNCERTAIN";
		statusLabels.Unknown = "UNKNOWN";


		var sortFunction;
		var trendConfig;


		function round(value) {
			return Math.round(value * postDecimalFactor) / postDecimalFactor;
		}

		function sortAsc(prev, next) {
			return prev.y - next.y;
		}

		function sortDesc(prev, next) {
			return next.y - prev.y;
		}

		function formatLabels() {
			return this.key;
		};

		function formatTooltip() {
			var label = '<br/><span style="color:' + this.color + '">\u25CF</span> <b>' + this.key + '</b>: ' + round(this.y) + " " + unit + " (" + round(this.percentage) + "%)";
			var statusLabel = getStatusLabel(this.point.status);

			if (statusLabel !== statusLabels.Good) {
				label += " (" + statusLabel + ")";
			}

			return label;
		};

		// Activate and deactivate display
		function deActivate() {
			if (right != "") {
				if ((String(activeValue) != "") && (activeNode != "")) {
					active = (nodeIsActive && hasRight);
				} else {
					active = hasRight;
				}
			} else {
				if ((String(activeValue) != "") && (activeNode != "")) {
					active = nodeIsActive;
				} else {
					active = true;
				}
			}

			if (active) {
				webMI.trigger.fire(SET_ACTIVE_TRIGGER, "", FO_ID);
				customSetIndicator();
			} else {
				webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", FO_ID);
			}
		}

		function getStatusLabel(status) {
			var label = "";

			if (_isGood(status)) {
				label = statusLabels.Good;
			} else if (_isBad(status)) {
				label = statusLabels.Bad;
			} else if (_isUncertain(status)) {
				label = statusLabels.Uncertain;
			} else {
				label = statusLabels.Unknown;
			}

			return label;
		}

		webMI.gfx.setVisible(MAIN_LABEL_ID, false);
		webMI.gfx.setVisible(SUB_LABEL_ID, false);
		webMI.gfx.setVisible(BORDER_ID, false);

		if (sortOrder === "Descending") {
			sortFunction = sortDesc;
		} else if (sortOrder === "Ascending") {
			sortFunction = sortAsc;
		}

		options.trendName = chartDiv.id.split("_dashboard_highcharts_container")[0];
		options.trendGroup = "";
		options.trendConfig = {};

		trendConfig = options.trendConfig;

		trendConfig.chart = {};
		trendConfig.title = {};
		trendConfig.xAxis = {};
		trendConfig.yAxis = {};
		trendConfig.yAxis.labels = {};
		trendConfig.tooltip = {};
		trendConfig.plotOptions = {};
		trendConfig.plotOptions.pie = {};
		trendConfig.plotOptions.pie.dataLabels = {};
		trendConfig.legend = {};
		trendConfig.series = [];
		trendConfig.credits = {};
		trendConfig.exporting = {};

		trendConfig.chart.type = "pie";
		trendConfig.chart.panning = false;

		trendConfig.title.text = "";

		trendConfig.xAxis.type = "category";
		trendConfig.xAxis.title = "";
		trendConfig.xAxis.lineWidth = 0;
		trendConfig.xAxis.gridLineWidth = 0;
		trendConfig.xAxis.minorGridLineWidth = 0;
		trendConfig.xAxis.majorGridLineWidth = 0;
		trendConfig.xAxis.lineColor = "transparent";
		trendConfig.xAxis.tickLength = 0;
		trendConfig.xAxis.minorTickLength = 0;
		trendConfig.xAxis.majorTickLength = 0;

		trendConfig.yAxis.min = min;
		trendConfig.yAxis.max = max;
		trendConfig.yAxis.title = "";
		trendConfig.yAxis.labels.enabled = false;
		trendConfig.yAxis.lineWidth = 0;
		trendConfig.yAxis.gridLineWidth = 0;
		trendConfig.yAxis.minorGridLineWidth = 0;
		trendConfig.yAxis.majorGridLineWidth = 0;
		trendConfig.yAxis.lineColor = "transparent";
		trendConfig.yAxis.tickLength = 0;
		trendConfig.yAxis.minorTickLength = 0;
		trendConfig.yAxis.majorTickLength = 0;

		trendConfig.plotOptions.pie.dataLabels.enabled = true;
		trendConfig.plotOptions.pie.dataLabels.formatter = formatLabels;
		trendConfig.plotOptions.pie.dataLabels.color = textColor;
		trendConfig.plotOptions.pie.animation = false;

		trendConfig.plotOptions.pie.size = outerSize + "%";
		trendConfig.plotOptions.pie.innerSize = innerSize + "%";

		trendConfig.tooltip.formatter = formatTooltip;
		trendConfig.tooltip.color = textColor;

		trendConfig.series.push({data: []});

		trendConfig.legend.enabled = false;
		trendConfig.credits.enabled = false;
		trendConfig.exporting.enabled = false;

		options.trendConfig.atviseOptions = {
			configNode: "",
			configName: "",
			mode: "",
			source: "opcUA",
			enableCursor1: false,
			enableCursor2: false,
			disableDownSampling: true
		};

		for (addressIdx; addressIdx <= MAX_SERIES_COUNT; addressIdx++) {
			seriesAddress = queryParams["series" + addressIdx + "Address"];
			seriesName = queryParams["series" + addressIdx + "Name"];
			seriesColor = queryParams["series" + addressIdx + "Color"];

			var seriesKey = "series" + addressIdx + "Address";
			var seriesAdd = typeof nodeCfg[seriesKey] != "undefined" && nodeCfg[seriesKey].read == true;


			if (seriesAdd && seriesAddress && seriesName) {
				addresses.push(seriesAddress);
				seriesNames.push(seriesName);
				seriesColors.push(seriesColor);
			}
		}

		if (addresses.length > 0) {

			webMI.trendFactory.createTrend(chartDiv, options, function (trendInstance) {
				var chart = trendInstance.chart;

				// Remove "prefix" SYSTEM.SECURITY.RIGHTS
				if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
					right = right.substring(23, right.length);
				}

				// Right handling
				if (right != "") {
					webMI.addEvent(webMI.data, "clientvariableschange", function (e) {
						hasRight = false;
						if (("username" in e) && (e.username != "")) {
							hasRight = webMI.hasRight(right);
						}
						deActivate();
					});
				}

				// Check active node and value
				if ((activeNode != "") && (String(activeValue) != "")) {
					webMI.data.subscribe(activeNode, function (e) {
						var nodeActiveValue = e.value;
						if (typeof nodeActiveValue == "boolean") {
							nodeIsActive = (String(nodeActiveValue) == activeValue);
						} else if (typeof nodeActiveValue == "number") {
							try {
								var temp = parseFloat(activeValue);
								nodeIsActive = (nodeActiveValue == temp);
							} catch (e) {
								nodeIsActive = false;
							}
						} else {
							nodeIsActive = (nodeActiveValue == activeValue);
						}

						deActivate();
					});
				} else {
					deActivate();
				}

				// Open display trigger
				webMI.trigger.connect(OPEN_DISPLAY_TRIGGER, function (triggerObj) {
					if (active) {
						webMI.display.openDisplay(triggerObj.value);
					}
				}, "");

				if (alarmAddress) {
					initAlarm(alarmAddress);
				}

				deActivate();
				chartDiv.style.visibility = "visible";

				webMI.data.subscribeBlock(addresses, [], function (nodes) {
					var nodeIdx = 0;
					var seriesObj = {};
					var seriesData = [];
					var worstState = 0;

					// Map series data
					for (nodeIdx; nodeIdx < nodes.length; nodeIdx++) {
						seriesObj = {};
						seriesObj.y = nodes[nodeIdx].value;
						seriesObj.name = seriesNames[nodeIdx];
						seriesObj.color = seriesColors[nodeIdx];
						seriesObj.status = nodes[nodeIdx].status;

						if (typeof seriesObj.y !== "number") {
							seriesObj.y = 0;
						}

						// use worst value state for status handling
						if (typeof seriesObj.status === "undefined") {
							worstState = undefined;
						} else if (_isGood(worstState) && (_isUncertain(seriesObj.status) || _isBad(seriesObj.status)) ||
							(_isUncertain(worstState) && _isBad(seriesObj.status))) {
							worstState = seriesObj.status;
						}

						seriesData.push(seriesObj);
					}

					// Sort series data
					if (sortFunction) {
						seriesData.sort(sortFunction);
					}

					// Cut entries
					if (seriesCount > 0 && seriesData.length > seriesCount) {
						seriesData = seriesData.slice(0, seriesCount);
					}

					chart.series[0].update({
						data: seriesData
					}, true);

				});
			});
		} else {
			webMI.trigger.fire(SET_INACTIVE_TRIGGER, "", "");
		}
	});
}

/**
 * FUNCTIONS
 */

// Set indicator
function customSetIndicator() {
	if (currentIndicator != "" || !active)
		return;

	if (activeIndicators["trigger"]) {
		currentIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		currentIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		currentIndicator = "alarm";
	} else {
		currentIndicator = "";
		return;
	}

	if (active) {
		webMI.trigger.fire(SET_BLINKING_FRAME_STROKE_TRIGGER, activeIndicators[currentIndicator].color, "");
		webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, null, "");
	}

	var interval = activeIndicators[currentIndicator].interval;
	setTimeout(function () {
		if (active) {
			webMI.trigger.fire(SHOW_HIDE_BLINKING_FRAME_TRIGGER, false, "");
		}
		setTimeout(function () {
			currentIndicator = "";
			customSetIndicator();
		}, interval);
	}, interval);
}


function setActiveLayout() {
}

function setInactiveLayout() {
}


]]></code>
</script>