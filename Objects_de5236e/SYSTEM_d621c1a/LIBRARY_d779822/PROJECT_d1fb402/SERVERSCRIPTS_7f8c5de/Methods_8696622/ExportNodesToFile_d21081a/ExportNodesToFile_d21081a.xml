<?xml version="1.0" encoding="UTF-8"?>
<script>
  <parameter name="address" type="stringarray" trigger="false" relative="false" value=""/>
  <parameter name="withouthierarchy" type="boolean" trigger="false" relative="false" value="false"/>
  <parameter name="file" type="string" trigger="false" relative="false" value=""/>
  <code><![CDATA[/** atvise server wrapper for UA method "AGENT.OPCUA.METHODS.exportNodes"
This script is a standard atvise resource and must not be modified.

Example:

var result = call("Methods.ExportNodesToFile", {
	address: ["AGENT.OBJECTS.instance1", "AGENT.OBJECTS.instance2"],
	withouthierarchy: true,
	file: "C:/myfiles/mynodes.xml"
});

if (result.error)
	console.log(result.errorstring);
else
	console.log(result.result);

Input:
param address {stringarray} Array of nodes to export.
param withouthierarchy {boolean}, {optional} If true then only the specified nodes shall be exported, otherwise the whole hierarchy (the default).
param file {string} The name of the file to export to.
	
Output:
return {Object} A result object is returned with the following properties:
- Object.error {number},{optional} Returns the error code of the call in case of an error. If no error occurred, it is undefined.
- Object.errorstring {string},{optional} Returns the error string of the call in case of an error. If no error occurred, it is undefined.
- Object.result {object},{optional} Returns the result of the call if no error occurred. It has the following properties:
	- result.success {boolean} If true then all nodes were successfully exported. false if an error occurred.
	- result.errors {[Object]},{optional} Returns the list of errors appeared during export.
		- Object.error {number} Returns the error code.
		- Object.errorstring {string} Returns the node causing the error.
*/

var exportNodes = Ua.findNode("AGENT.OPCUA.METHODS.exportNodes").result;

var response = exportNodes.call({
	object: "AGENT.OPCUA.METHODS",
	input: [
		{ type: Ua.DataType.NODEID, value: address },
		{ type: Ua.DataType.BOOLEAN, value: withouthierarchy }
	]
});

var result = {};

if (response.error) {
	result.error = response.error;
	result.errorstring = Ua.Status(result).toString();

	if (response.argumentError) {
		var parameterNames = ["address", "withouthierarchy"];

		for (var i = 0; i < response.argumentError.length; ++i)
			if (response.argumentError[i]) {
				result.errorstring += ", " + parameterNames[i] + ":" + Ua.Status(response.argumentError[i]).toString();
			}
	}
} else if (!new FileSystem().createFile(file, { overwrite: true })) {
	result.error = Ua.Status.BADINVALIDARGUMENT;
	result.errorstring = Ua.Status(result.error).toString() + ", file:BadInvalidArgument:" + file;
} else {
	const xmlResult = response.result;
	result.result = { success: true };

	if (xmlResult.length > 0) {
		var stream = new OutputFileStream(file, "utf8");
		stream.write(xmlResult[0]);
		stream.close();
	}

	if (xmlResult.length === 3) {
		result.result["success"] = false;
		result.result["errors"] = [];

		for (var i = 0; i < xmlResult[1].length; ++i)
			result.result["errors"].push({
				error: xmlResult[1][i],
				errorstring: xmlResult[2][i]
			});
	}
}

return result;
]]></code>
</script>
