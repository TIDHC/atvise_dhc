<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
  </metadata>
  <code><![CDATA[/**
 * Code for the button_open_display object display
 * -----------------------------------------------
 * This button sets a dedicated value to an address.
 * In addition, the following triggers are fired:
 * - valuechanged: on MouseClick
 * - valuechangedMouseUp: on MouseUp
 * - valuechangedMouseDown: on MouseDown
 */

/**
 * DECLARATION SECTION
 */

var base = webMI.query["base"] == undefined ? "" : webMI.query["base"];
var strokeNormal = "none";
var strokePressed = webMI.query["strokePressed"];
var extraBorderColor = webMI.query["extraBorderColor"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var fillColor = webMI.query["fillColor"];
var fillColorInactive = webMI.query["fillColorInactive"];
var onMouseDownValue = webMI.query["onMouseDownValue"] == undefined ? "" : webMI.query["onMouseDownValue"];
var onMouseDownNode = webMI.query["onMouseDownNode"] == undefined ? "" : webMI.query["onMouseDownNode"];
var onMouseUpValue = webMI.query["onMouseUpValue"] == undefined ? "" : webMI.query["onMouseUpValue"];
var onMouseUpNode = webMI.query["onMouseUpNode"] == undefined ? "" : webMI.query["onMouseUpNode"];
var newValue = webMI.query["value"] == undefined ? "" : webMI.query["value"];
var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var tabIndex = webMI.query["tabIndex"] == undefined ? "" : webMI.query["tabIndex"];
var tooltip = webMI.query["tooltip"] == undefined ? "" : webMI.query["tooltip"];
var right = webMI.query["right"] == undefined ? "" : webMI.query["right"];
var activeValue = webMI.query["activeValue"] == undefined ? "" : webMI.query["activeValue"];
var activeNode = webMI.query["activeNode"] == undefined ? "" : webMI.query["activeNode"];
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

var lockInputEvents = true;

/** advanced menu layout wiht corrections **/
var menuLayout = {
	customElementPosition: webMI.query["elementPosition"],
	customFadeInAtHover: webMI.query["fadeInAtHover"],
	customElementOffsetX: webMI.query["elementOffsetX"],
	customElementOffsetY: webMI.query["elementOffsetY"],
	customClickareaEnlargement: webMI.query["clickareaEnlargement"],
	customElementLayoutOffsets: {}
};


/**
 * RUNTIME SECTION
 */
if (typeof activationTriggerHandling === "function") activationTriggerHandling("com.atvise.setActive");

var notifierConfig = {
	id: document.getElementById("button_clickarea").id,
	rights: [
		{ nodeId: webMI.query["base"], rights: "write", disable: true, notify: false },
		{ nodeId: webMI.query["activeNode"], rights: "read", disable: true, notify: true },
		{ nodeId: webMI.query["onMouseDownNode"], rights: "write", disable: true, notify: false },
		{ nodeId: webMI.query["onMouseUpNode"], rights: "write", disable: true, notify: false }
	],
	menuLayout: menuLayout
};

var rightsHandlingProperties = {
	activationNodeSet: { activeNode: webMI.query["activeNode"], activeValue: webMI.query["activeValue"] },
	notifierConfiguration: webMI.query.displayAcNotification === "true" ? notifierConfig : {},
	userRight: right
};

if (typeof rightsHandling === "function") rightsHandling(rightsHandlingProperties);

if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
	webMI.gfx.setStroke("button_stroke", extraBorderColor);
}

webMI.addOnload(function () {
	var doc = document.getElementById("button_clickarea").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		auto: "true",
		id: "button_clickarea",
		text: tooltip
	});
}

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	lockInputEvents = false;

	webMI.gfx.setFill("button_bg", fillColor);
	webMI.gfx.setVisible("button_stroke", null);
}

function setInactiveLayout() {
	lockInputEvents = true;

	webMI.gfx.setFill("button_bg", fillColorInactive);
	webMI.gfx.setVisible("button_stroke", false);
}

function release() {
	webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	if (typeof extraBorderColor == "undefined" || extraBorderColor == "none" || extraBorderColor == "") {
		webMI.gfx.setStroke("button_stroke", strokeNormal);
	} else {
		webMI.gfx.setStroke("button_stroke", extraBorderColor);
		webMI.gfx.setStrokeWidth("button_stroke", 1);
	}
}

function focusTH() {
	webMI.gfx.setStroke("button_stroke", focusStrokeColor);
	if (typeof extraBorderColor != "undefined" && extraBorderColor != "none" && extraBorderColor != "") {
		webMI.gfx.setStrokeWidth("button_stroke", 2);
	}
}

function applyTH() {
	if (lockInputEvents) return;

	if (base != "" && String(newValue) != "") {
		if (newValue == "true") {
			newValue = true;
		} else if (newValue == "false") {
			newValue = false;
		} else {
			try {
				var temp = parseFloat(newValue);
				if (!isNaN(temp)) {
					newValue = temp;
				}
			} catch (e) {}
		}
		webMI.data.write(base, newValue);
	}
	webMI.trigger.fire("valuechanged", newValue, "");
}

function backTH() {}

function arrowTH(dir) {}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		release();
	} else if (keyTH == "apply") {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		applyTH();
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("button_stroke", "url(#linear_1)");
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		arrowTH(param2);
	} else if (keyTH == "isActive") {
		return param2(document.getElementById("button_clickarea").parentNode);
	}
}

/**
 * EVENT SECTION
 */

webMI.addEvent("button_clickarea", "mousedown", function (e) {
	if (lockInputEvents) return;

	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		webMI.gfx.setFill("button_stroke", "url(#linear_2)");
		webMI.gfx.setStroke("button_stroke", strokePressed);
		if (onMouseDownNode != "" && String(onMouseDownValue) != "") {
			if (onMouseDownValue == "true") {
				onMouseDownValue = true;
			} else if (onMouseDownValue == "false") {
				onMouseDownValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseDownValue);
					if (!isNaN(temp)) {
						onMouseDownValue = temp;
					}
				} catch (e) {}
			}
			webMI.data.write(onMouseDownNode, onMouseDownValue);
		}
		webMI.trigger.fire("valuechangedMouseDown", onMouseDownValue, "");
	})(value);
});

webMI.addEvent("button_clickarea", "mouseup", function (e) {
	if (lockInputEvents) return;

	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		release();
		if (onMouseUpNode != "" && String(onMouseUpValue) != "") {
			if (onMouseUpValue == "true") {
				onMouseUpValue = true;
			} else if (onMouseUpValue == "false") {
				onMouseUpValue = false;
			} else {
				try {
					var temp = parseFloat(onMouseUpValue);
					if (!isNaN(temp)) {
						onMouseUpValue = temp;
					}
				} catch (e) {}
			}
			webMI.data.write(onMouseUpNode, onMouseUpValue);
		}
		webMI.trigger.fire("valuechangedMouseUp", onMouseUpValue, "");
	})(value);
});

webMI.addEvent("button_clickarea", "mouseout", function (e) {
	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		release();
	})(value);
});

webMI.addEvent("button_clickarea", "click", function (e) {
	if (lockInputEvents) return;

	var id = "button_clickarea";
	var value = true;
	return (function (value) {
		tabHandler.setCurrentIndex(keyHandler);
		if (base != "" && String(newValue) != "") {
			if (newValue == "true") {
				newValue = true;
			} else if (newValue == "false") {
				newValue = false;
			} else {
				try {
					var temp = parseFloat(newValue);
					if (!isNaN(temp)) {
						newValue = temp;
					}
				} catch (e) {}
			}
			webMI.data.write(base, newValue);
		}
		webMI.trigger.fire("valuechanged", newValue, "");
	})(value);
});

webMI.addEvent("button_clickarea", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});
]]></code>
</script>
