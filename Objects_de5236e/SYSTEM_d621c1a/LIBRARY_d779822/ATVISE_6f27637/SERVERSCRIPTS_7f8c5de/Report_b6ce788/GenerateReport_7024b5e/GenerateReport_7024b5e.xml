<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
    <owner>root</owner>
    <runcontext>caller</runcontext>
  </metadata>
  <parameter name="configuration" type="string" trigger="false" relative="false" value=""/>
  <code><![CDATA[/* Report Generator *
 *
 * Configuration JSON parameters:
 *  name {string}        : Configuration name.
 *  reportTime {time}    : Optional report time as Javascript timestamp in ms or as valid date string.
 *  locale {string}      : Optional localization string for the report format, e.g. 'de-DE', 'en-US'.
 *  template {string}	 : Path with filename for the xlsx template file.
 *  xlsxReport {string}  : Path with filename for the xlsx result file.
 *  pdfReport {string}	 : Path with filename for the pdf  result file.
 *  htmlReport {string}  : Path with filename for the html result file (currently unsupported).
 *  startWorksheet {nr.} : Worksheet for the start of the convertion.
 *  endWorksheet {nr.}   : Worksheet for the end   of the convertion.
 *  overwrite {bool}     : Option to overwrite existing report files.
 *  metaScript {string}	 : Script to be called  when data type is 'meta'.
 *
 * Remark:
 * Use absolute paths or start with './' for a relative path starting with the project directory (= server.database.directory).
 * Report filenames can contain date placeholders: {YYYY} or {YY}, {MM}, {DD}, {hh}, {mm}, {ss}.
 *
 */

var DEBUG = false;
var databaseDir = server.database.directory;
var errors = [];

/**
 * Generic functions
 */
function _handleResult(data) {
	if (typeof data == "string") {
		data = JSON.parse(data);	
	}
	
	if (data && data.error && data.error != 0) {
		var errorstring = data.errorstring ? data.errorstring : "An unknown error occured.";
		console.error("Report Error: " + errorstring);
		
		if (errorstring.length > 100)
			errorstring = errorstring.substring(0, 100) + "...";
		errors.push(errorstring);

		return {success: false, error: data.error, errorstring: errorstring};
	}
}

function _replaceDatePlaceholders(date, string) {
	string = string.replace("{YYYY}", date.getFullYear());
	string = string.replace("{YY}", ( '' + date.getFullYear()).slice(-2));
	string = string.replace("{MM}", ('0' + (date.getMonth()+1)).slice(-2));
	string = string.replace("{DD}", ('0' + date.getDate()).slice(-2));
	string = string.replace("{hh}", ('0' + date.getHours()).slice(-2));
	string = string.replace("{mm}", ('0' + date.getMinutes()).slice(-2));
	string = string.replace("{ss}", ('0' + date.getSeconds()).slice(-2));
	return string;
}

function _replaceDatabaseDir(dir) {
	if(!dir)
		return "";

	return dir.replace("./", server.database.directory).replace(".\\", server.database.directory);
}

function _isValidDate(date) {
  return date && Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date);
}

/**
 * Check (mandatory) parameters, file endings and script existence
 */

if (DEBUG) console.log("Report started for parameters: " + JSON.stringify(configuration));

var validityCheck = call("Report.ConfigurationHandler", { action: "check", configuration: configuration });
if (validityCheck == true) {
	var cfg = configuration
	if (typeof configuration == "string")
		cfg = JSON.parse(configuration)
} else {
	return _handleResult(validityCheck);
}

if (typeof cfg.reportTime == "undefined" || cfg.reportTime == 0 || cfg.reportTime == "") {
	cfg.reportTime = new Date();
} else {
	if (!_isValidDate(cfg.reportTime)) {
		try {
			var parsedTime = parseInt(cfg.reportTime);
			if (!isNaN(parsedTime))
				cfg.reportTime = parsedTime;
			else
				cfg.reportTime = cfg.reportTime.replaceAll("'", "");
		} catch(ex) {}

		cfg.reportTime = new Date(cfg.reportTime);
	}
}

if (!_isValidDate(cfg.reportTime)) {
	return _handleResult({error: -1, errorstring: "Report: 'reportTime' is not a valid Javascript timestamp."});
}

cfg.template   = _replaceDatabaseDir(cfg.template);
cfg.xlsxReport = _replaceDatabaseDir(cfg.xlsxReport);
cfg.pdfReport  = _replaceDatabaseDir(cfg.pdfReport);
cfg.htmlReport = _replaceDatabaseDir(cfg.htmlReport);

cfg.xlsxReport = _replaceDatePlaceholders(cfg.reportTime, cfg.xlsxReport);
cfg.pdfReport  = _replaceDatePlaceholders(cfg.reportTime, cfg.pdfReport);
cfg.htmlReport = _replaceDatePlaceholders(cfg.reportTime, cfg.htmlReport);

/**
 * Initiate and create report
 */
if (DEBUG) console.log(" -- Creating Report -- "); 

var report = new Report(cfg.template, {
	reportTime: cfg.reportTime.getTime()
	});
	
var result = report.generate(function(query){
  if (typeof query == "undefined" || typeof query.type == "undefined")
	_handleResult({error: -1, errorstring: "'query' or 'query.type' is undefined."});

  if (DEBUG){
	console.log("query.type: " + query.type);
	console.log("query.data: " + JSON.stringify(query.data));
  }

  switch (query.type)
  {
    case 'node':
      var node = Ua.findNode(query.data);
      if (DEBUG) console.log("node.result: " + JSON.stringify(node.result));
      
	  var nodeExist = Ua.Status(node) != Ua.Status.BADNODEIDUNKNOWN;   
	  if(nodeExist) {
		return node.result;
	  } else {
		_handleResult({error: -1, errorstring: "Node " + query.data + " not found or permission missing."});
	  }
      break;

    case 'query':
      var result = history.query(query.data);
      if (DEBUG) console.log("query.result: " + JSON.stringify(result));
      return result.result;
      break;
      
    case 'meta':
	  if (cfg.metaScript) {
		  var result = call(cfg.metaScript, {"data": query.data});
		  
		  if (typeof result != "object") {
			_handleResult({error: -1, errorstring: "Type of meta script result is not 'object'."});
		  } else {
			  if (DEBUG) console.log("meta.result: " + JSON.stringify(result));
			  return result; 
		  }
	  } else {
			_handleResult({error: -1, errorstring: "Data type is 'meta' but no 'metaScript' is defined."});
	  }
      break;

	case 'alarm':
      if (query.data) {
			var result = alarming.read(query.data);
			
			if (result.length > 0)
				result = result[0];
      } else  {
			var result = alarming.list;
      }
      
      if (DEBUG) console.log("alarm.result: " + JSON.stringify(result));
      return result;
	  break;

    default:
	  _handleResult({error: -1, errorstring: "Unimplemented type of " + query.type});
      break;
  }
});

_handleResult(result);

/**
 * Save report
 */
if (DEBUG) console.log(" -- Saving Report -- ");

var overwrite = (cfg.overwrite === false || cfg.overwrite === "false") ? false : true;

if (cfg.xlsxReport)
	_handleResult(report.save(cfg.xlsxReport, { overwrite: overwrite }));
if (cfg.pdfReport)
	_handleResult(report.saveAsPdf(cfg.pdfReport, { overwrite: overwrite,
													startWorksheet: cfg.startWorksheet ? cfg.startWorksheet : 0,
													endWorksheet: cfg.endWorksheet ? cfg.endWorksheet : 0,
													locale: cfg.locale ? cfg.locale : ""}));
if (cfg.htmlReport)
	_handleResult(report.saveAsHtml(cfg.htmlReport, { overwrite: overwrite,
													  startWorksheet: cfg.startWorksheet ? cfg.startWorksheet : 0,
													  endWorksheet: cfg.endWorksheet ? cfg.endWorksheet : 0,
													  locale: cfg.locale ? cfg.locale : ""}));

_handleResult(report.release());
console.log("Report finished for " + cfg.name);

if (errors.length > 0)
	return {success: false, error: -1, errorstring: errors.toString()};
else
	return {success: true};]]></code>
</script>
